/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as ProtectedOrgsIndexImport } from './routes/_protected/orgs/index'
import { Route as ProtectedOrgsOrgIdIndexImport } from './routes/_protected/orgs/$orgId/index'
import { Route as ProtectedOrgsOrgIdSettingsImport } from './routes/_protected/orgs/$orgId/settings'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedOrgsIndexRoute = ProtectedOrgsIndexImport.update({
  id: '/_protected/orgs/',
  path: '/orgs/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedOrgsOrgIdIndexRoute = ProtectedOrgsOrgIdIndexImport.update({
  id: '/_protected/orgs/$orgId/',
  path: '/orgs/$orgId/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedOrgsOrgIdSettingsRoute = ProtectedOrgsOrgIdSettingsImport.update(
  {
    id: '/_protected/orgs/$orgId/settings',
    path: '/orgs/$orgId/settings',
    getParentRoute: () => rootRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected/orgs/': {
      id: '/_protected/orgs/'
      path: '/orgs'
      fullPath: '/orgs'
      preLoaderRoute: typeof ProtectedOrgsIndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected/orgs/$orgId/settings': {
      id: '/_protected/orgs/$orgId/settings'
      path: '/orgs/$orgId/settings'
      fullPath: '/orgs/$orgId/settings'
      preLoaderRoute: typeof ProtectedOrgsOrgIdSettingsImport
      parentRoute: typeof rootRoute
    }
    '/_protected/orgs/$orgId/': {
      id: '/_protected/orgs/$orgId/'
      path: '/orgs/$orgId'
      fullPath: '/orgs/$orgId'
      preLoaderRoute: typeof ProtectedOrgsOrgIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginIndexRoute
  '/orgs': typeof ProtectedOrgsIndexRoute
  '/orgs/$orgId/settings': typeof ProtectedOrgsOrgIdSettingsRoute
  '/orgs/$orgId': typeof ProtectedOrgsOrgIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginIndexRoute
  '/orgs': typeof ProtectedOrgsIndexRoute
  '/orgs/$orgId/settings': typeof ProtectedOrgsOrgIdSettingsRoute
  '/orgs/$orgId': typeof ProtectedOrgsOrgIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login/': typeof LoginIndexRoute
  '/_protected/orgs/': typeof ProtectedOrgsIndexRoute
  '/_protected/orgs/$orgId/settings': typeof ProtectedOrgsOrgIdSettingsRoute
  '/_protected/orgs/$orgId/': typeof ProtectedOrgsOrgIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/orgs' | '/orgs/$orgId/settings' | '/orgs/$orgId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/orgs' | '/orgs/$orgId/settings' | '/orgs/$orgId'
  id:
    | '__root__'
    | '/'
    | '/login/'
    | '/_protected/orgs/'
    | '/_protected/orgs/$orgId/settings'
    | '/_protected/orgs/$orgId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  ProtectedOrgsIndexRoute: typeof ProtectedOrgsIndexRoute
  ProtectedOrgsOrgIdSettingsRoute: typeof ProtectedOrgsOrgIdSettingsRoute
  ProtectedOrgsOrgIdIndexRoute: typeof ProtectedOrgsOrgIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  ProtectedOrgsIndexRoute: ProtectedOrgsIndexRoute,
  ProtectedOrgsOrgIdSettingsRoute: ProtectedOrgsOrgIdSettingsRoute,
  ProtectedOrgsOrgIdIndexRoute: ProtectedOrgsOrgIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login/",
        "/_protected/orgs/",
        "/_protected/orgs/$orgId/settings",
        "/_protected/orgs/$orgId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/_protected/orgs/": {
      "filePath": "_protected/orgs/index.tsx"
    },
    "/_protected/orgs/$orgId/settings": {
      "filePath": "_protected/orgs/$orgId/settings.tsx"
    },
    "/_protected/orgs/$orgId/": {
      "filePath": "_protected/orgs/$orgId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
