/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as IndexImport } from './routes/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as ProtectedOrgsIndexImport } from './routes/_protected/orgs/index'
import { Route as ProtectedOrgsOrgIdSettingsImport } from './routes/_protected/orgs/$orgId/settings'
import { Route as ProtectedOrgsOrgIdAppsImport } from './routes/_protected/orgs/$orgId/apps'

// Create/Update Routes

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedOrgsIndexRoute = ProtectedOrgsIndexImport.update({
  id: '/orgs/',
  path: '/orgs/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedOrgsOrgIdSettingsRoute = ProtectedOrgsOrgIdSettingsImport.update(
  {
    id: '/orgs/$orgId/settings',
    path: '/orgs/$orgId/settings',
    getParentRoute: () => ProtectedRoute,
  } as any,
)

const ProtectedOrgsOrgIdAppsRoute = ProtectedOrgsOrgIdAppsImport.update({
  id: '/orgs/$orgId/apps',
  path: '/orgs/$orgId/apps',
  getParentRoute: () => ProtectedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected/orgs/': {
      id: '/_protected/orgs/'
      path: '/orgs'
      fullPath: '/orgs'
      preLoaderRoute: typeof ProtectedOrgsIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/orgs/$orgId/apps': {
      id: '/_protected/orgs/$orgId/apps'
      path: '/orgs/$orgId/apps'
      fullPath: '/orgs/$orgId/apps'
      preLoaderRoute: typeof ProtectedOrgsOrgIdAppsImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/orgs/$orgId/settings': {
      id: '/_protected/orgs/$orgId/settings'
      path: '/orgs/$orgId/settings'
      fullPath: '/orgs/$orgId/settings'
      preLoaderRoute: typeof ProtectedOrgsOrgIdSettingsImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedOrgsIndexRoute: typeof ProtectedOrgsIndexRoute
  ProtectedOrgsOrgIdAppsRoute: typeof ProtectedOrgsOrgIdAppsRoute
  ProtectedOrgsOrgIdSettingsRoute: typeof ProtectedOrgsOrgIdSettingsRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedOrgsIndexRoute: ProtectedOrgsIndexRoute,
  ProtectedOrgsOrgIdAppsRoute: ProtectedOrgsOrgIdAppsRoute,
  ProtectedOrgsOrgIdSettingsRoute: ProtectedOrgsOrgIdSettingsRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/login': typeof LoginIndexRoute
  '/orgs': typeof ProtectedOrgsIndexRoute
  '/orgs/$orgId/apps': typeof ProtectedOrgsOrgIdAppsRoute
  '/orgs/$orgId/settings': typeof ProtectedOrgsOrgIdSettingsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/login': typeof LoginIndexRoute
  '/orgs': typeof ProtectedOrgsIndexRoute
  '/orgs/$orgId/apps': typeof ProtectedOrgsOrgIdAppsRoute
  '/orgs/$orgId/settings': typeof ProtectedOrgsOrgIdSettingsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/login/': typeof LoginIndexRoute
  '/_protected/orgs/': typeof ProtectedOrgsIndexRoute
  '/_protected/orgs/$orgId/apps': typeof ProtectedOrgsOrgIdAppsRoute
  '/_protected/orgs/$orgId/settings': typeof ProtectedOrgsOrgIdSettingsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/orgs'
    | '/orgs/$orgId/apps'
    | '/orgs/$orgId/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/orgs'
    | '/orgs/$orgId/apps'
    | '/orgs/$orgId/settings'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/login/'
    | '/_protected/orgs/'
    | '/_protected/orgs/$orgId/apps'
    | '/_protected/orgs/$orgId/settings'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  LoginIndexRoute: typeof LoginIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  LoginIndexRoute: LoginIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected",
        "/login/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/orgs/",
        "/_protected/orgs/$orgId/apps",
        "/_protected/orgs/$orgId/settings"
      ]
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/_protected/orgs/": {
      "filePath": "_protected/orgs/index.tsx",
      "parent": "/_protected"
    },
    "/_protected/orgs/$orgId/apps": {
      "filePath": "_protected/orgs/$orgId/apps.tsx",
      "parent": "/_protected"
    },
    "/_protected/orgs/$orgId/settings": {
      "filePath": "_protected/orgs/$orgId/settings.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
